{
  "You can create DOM element from string": {
    "prefix": "createElementFromStr",
    "scope": "javascript",
    "body": "export const createElementFromStr1 = (body = '<div></div>') => {\n\treturn new DOMParser().parseFromString(body, 'text/html').body\n\t\t.firstElementChild\n}\n\nexport const createElementFromStr2 = (body) => {\n\tconst element = document.createElement('template')\n\telement.innerHTML = body\n\treturn element.content\n}\n\nexport const createElementFromStr3 = (body) => {\n\tconst element = document.createElement('template')\n\telement.innerHTML = body\n\treturn element.content.firstElementChild\n}"
  },
  "Check if an element is visible": {
    "prefix": "isElementVisible",
    "scope": "javascript",
    "body": "const isVisible1 = (element) => {\n\tconst position = element.getBoundingClientRect()\n\tif (position.top >= 0 && position.bottom <= innerHeight) return true\n\telse if (position.top < innerHeight && position.bottom >= 0) return 'true'\n\telse return false\n}\n\nconst isVisible2 = (element) => {\n\tconst position = element.getBoundingClientRect()\n\n\tif (position.top >= 0 && position.bottom <= innerHeight) return 3\n\tif (position.top < 0 && position.bottom > 0 && position.bottom < innerHeight)\n\t\treturn 2\n\tif (\n\t\tposition.top >= 0 &&\n\t\tposition.top < innerHeight &&\n\t\tposition.bottom > innerHeight\n\t)\n\t\treturn 1\n\treturn 0\n}"
  },
  "Get a random number": {
    "prefix": "randomNumber",
    "scope": "javascript",
    "body": "export const randomNumber = (max = 1, min = 0) => {\n\treturn Math.floor(Math.random() * (max - min + 1) + min)\n}"
  },
  "Physically select a text/image of a element": {
    "prefix": "selectElement",
    "scope": "javascript",
    "body": "const selectElement = (element) => {\n\tif (document.body.createTextRange) {\n\t\tconst range = document.body.createTextRange()\n\t\trange.moveToElementText(element)\n\t\trange.select()\n\t} else if (window.getSelection) {\n\t\tconst selection = window.getSelection()\n\t\tconst range = document.createRange()\n\t\trange.selectNodeContents(element)\n\t\tselection.removeAllRanges()\n\t\tselection.addRange(range)\n\t}\n\treturn element.textContent.trim()\n}"
  },
  "Sort a list of node": {
    "prefix": "sortElements",
    "scope": "javascript",
    "body": "const sortElements = (selectors) => {\n\tlet i, switching, b, shouldSwitch\n\tswitching = true\n\twhile (switching) {\n\t\tswitching = false\n\t\tb = document.querySelectorAll(selectors)\n\t\tfor (i = 0; i < b.length - 1; i++) {\n\t\t\tshouldSwitch = false\n\t\t\tif (\n\t\t\t\tb[i].textContent.toLowerCase().trim() >\n\t\t\t\tb[i + 1].textContent.toLowerCase().trim()\n\t\t\t) {\n\t\t\t\tshouldSwitch = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (shouldSwitch) {\n\t\t\tb[i].parentNode.insertBefore(b[i + 1], b[i])\n\t\t\tswitching = true\n\t\t}\n\t}\n}"
  },
  "Wait for sometime...": {
    "prefix": "wait",
    "scope": "javascript",
    "body": "const wait = (duration) => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, duration)\n\t})\n}"
  }
}